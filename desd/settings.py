"""
Django settings for desd project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import logging
import os
import requests
import sys

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(os.environ.get("DEBUG", default=0))

ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS", "127.0.0.1").split(",")


# Application definition

INSTALLED_APPS = [
    "bootstrap_modal_forms",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "myapp.apps.MyappConfig",
    "widget_tweaks",
    "paypal.standard.ipn",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "myapp.middleware.CurrentUserMiddleware",
]

ROOT_URLCONF = "desd.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],  # I changed from "DIRS": [os.path.join("/app", "templates")] to this for relative paths:"
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "desd.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': os.getenv('DATABASE_ENGINE', 'django.db.backends.mysql'),
        'NAME': os.getenv('DATABASE_NAME', 'default_db_name'),
        'USER': os.getenv('DATABASE_USERNAME', 'default_user'),
        'PASSWORD': os.getenv('DATABASE_PASSWORD', 'default_password'),
        'HOST': os.getenv('DATABASE_HOST', 'localhost'),  # Set to 'db' for Docker Compose
        'PORT': os.getenv('DATABASE_PORT', '3306'),
    }
}



# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-gb"

TIME_ZONE = "Europe/London"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

# Change these paths
STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, "static")

# Media files (uploaded files)
MEDIA_URL = '/media/'
MEDIA_ROOT = "/app/media"  

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


LOGIN_REDIRECT_URL = "/"

# Temporary email redirect, this puts password reset emails into the console logs.
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# ML Service configuration
ML_SERVICE_URL = os.environ.get("ML_SERVICE_URL", "http://ml-service:8001")

TESTING = "test" in sys.argv

# ngrok local development setup
def get_ngrok_public_url():
    if os.getenv('USE_NGROK', 'False') == 'True':
        try:
            response = requests.get('http://ngrok:4040/api/tunnels')
            tunnels = response.json().get('tunnels')
            if tunnels:
                for tunnel in tunnels:
                    if tunnel['public_url'].startswith('https'):
                        return tunnel['public_url']
        except Exception as e:
            logging.error(f"Error fetching ngrok URL: {e}")
    return None

USE_NGROK = os.getenv('USE_NGROK', 'False') == 'True'
NGROK_URL = get_ngrok_public_url() if USE_NGROK else None

# Paypal settings
PAYPAL_TEST = True
PAYPAL_RECEIVER_EMAIL = 'business@headlights.com' # Business sandbox account

CSRF_TRUSTED_ORIGINS = []

if NGROK_URL:
    PAYPAL_IPN_URL = f"{NGROK_URL}/paypal/"
    NGROK = NGROK_URL.replace('https://', '')
    ALLOWED_HOSTS += [NGROK]
    CSRF_TRUSTED_ORIGINS += [NGROK_URL]
