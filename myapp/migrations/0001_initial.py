# Generated by Django 5.1.5 on 2025-02-25 10:11

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Bod',
            fields=[
                ('bodid', models.AutoField(db_column='BodID', primary_key=True, serialize=False)),
                ('username', models.CharField(blank=True, db_column='Username', max_length=255, null=True)),
            ],
            options={
                'db_table': 'Bod',
            },
        ),
        migrations.CreateModel(
            name='Claim',
            fields=[
                ('claimid', models.AutoField(db_column='ClaimID', primary_key=True, serialize=False)),
                ('settlementvalue', models.FloatField(blank=True, db_column='SettlementValue', null=True)),
                ('accidenttype', models.CharField(blank=True, db_column='AccidentType', max_length=255, null=True)),
                ('injuryprognosis', models.IntegerField(blank=True, db_column='InjuryPrognosis', null=True)),
                ('specialhealthexpenses', models.FloatField(blank=True, db_column='SpecialHealthExpenses', null=True)),
                ('specialreduction', models.FloatField(blank=True, db_column='SpecialReduction', null=True)),
                ('specialoverage', models.FloatField(blank=True, db_column='SpecialOverage', null=True)),
                ('generalrest', models.FloatField(blank=True, db_column='GeneralRest', null=True)),
                ('specialadditionalinjury', models.FloatField(blank=True, db_column='SpecialAdditionalInjury', null=True)),
                ('specialearningsloss', models.FloatField(blank=True, db_column='SpecialEarningsLoss', null=True)),
                ('specialusageloss', models.FloatField(blank=True, db_column='SpecialUsageLoss', null=True)),
                ('specialmedications', models.FloatField(blank=True, db_column='SpecialMedications', null=True)),
                ('specialassetdamage', models.FloatField(blank=True, db_column='SpecialAssetDamage', null=True)),
                ('specialrehabilitation', models.FloatField(blank=True, db_column='SpecialRehabilitation', null=True)),
                ('specialfixes', models.FloatField(blank=True, db_column='SpecialFixes', null=True)),
                ('generalfixed', models.FloatField(blank=True, db_column='GeneralFixed', null=True)),
                ('generaluplift', models.FloatField(blank=True, db_column='GeneralUplift', null=True)),
                ('specialloanervehicle', models.FloatField(blank=True, db_column='SpecialLoanerVehicle', null=True)),
                ('specialtripcosts', models.FloatField(blank=True, db_column='SpecialTripCosts', null=True)),
                ('specialjourneyexpenses', models.FloatField(blank=True, db_column='SpecialJourneyExpenses', null=True)),
                ('specialtherapy', models.FloatField(blank=True, db_column='SpecialTherapy', null=True)),
                ('exceptionalcircumstances', models.IntegerField(blank=True, db_column='ExceptionalCircumstances', null=True)),
                ('minorpsychologicalinjury', models.IntegerField(blank=True, db_column='MinorPsychologicalInjury', null=True)),
                ('dominantinjury', models.CharField(blank=True, db_column='DominantInjury', max_length=255, null=True)),
                ('whiplash', models.IntegerField(blank=True, db_column='Whiplash', null=True)),
                ('vehicletype', models.CharField(blank=True, db_column='VehicleType', max_length=255, null=True)),
                ('weatherconditions', models.CharField(blank=True, db_column='WeatherConditions', max_length=255, null=True)),
                ('accidentdate', models.IntegerField(blank=True, db_column='AccidentDate', null=True)),
                ('claimdate', models.IntegerField(blank=True, db_column='ClaimDate', null=True)),
                ('vehicleage', models.IntegerField(blank=True, db_column='VehicleAge', null=True)),
                ('driverage', models.IntegerField(blank=True, db_column='DriverAge', null=True)),
                ('numberofpassengers', models.IntegerField(blank=True, db_column='NumberOfPassengers', null=True)),
                ('accidentdescription', models.CharField(blank=True, db_column='AccidentDescription', max_length=255, null=True)),
                ('injurydescription', models.CharField(blank=True, db_column='InjuryDescription', max_length=255, null=True)),
                ('policereportfiled', models.IntegerField(blank=True, db_column='PoliceReportFiled', null=True)),
                ('witnesspresent', models.IntegerField(blank=True, db_column='WitnessPresent', null=True)),
                ('gender', models.CharField(blank=True, db_column='Gender', max_length=255, null=True)),
            ],
            options={
                'db_table': 'Claim',
            },
        ),
        migrations.CreateModel(
            name='Model',
            fields=[
                ('modelid', models.AutoField(db_column='ModelID', primary_key=True, serialize=False)),
                ('modelname', models.CharField(blank=True, db_column='ModelName', max_length=255, null=True)),
                ('notes', models.CharField(blank=True, db_column='Notes', max_length=255, null=True)),
                ('filepath', models.CharField(blank=True, db_column='FilePath', max_length=255, null=True)),
            ],
            options={
                'db_table': 'Model',
            },
        ),
        migrations.CreateModel(
            name='Operationlookup',
            fields=[
                ('operationid', models.AutoField(db_column='OperationID', primary_key=True, serialize=False)),
                ('operationname', models.CharField(blank=True, db_column='OperationName', max_length=255, null=True)),
            ],
            options={
                'db_table': 'OperationLookup',
            },
        ),
        migrations.CreateModel(
            name='Permissionlevel',
            fields=[
                ('permissionid', models.AutoField(db_column='PermissionID', primary_key=True, serialize=False)),
                ('systempermissionlevel', models.IntegerField(blank=True, db_column='SystemPermissionLevel', null=True)),
                ('mlpermissionlevel', models.IntegerField(blank=True, db_column='MLPermissionLevel', null=True)),
                ('notes', models.CharField(blank=True, db_column='Notes', max_length=255, null=True)),
            ],
            options={
                'db_table': 'PermissionLevel',
            },
        ),
        migrations.CreateModel(
            name='Tablelookup',
            fields=[
                ('tableid', models.AutoField(db_column='TableID', primary_key=True, serialize=False)),
                ('tablename', models.CharField(blank=True, db_column='TableName', max_length=255, null=True)),
            ],
            options={
                'db_table': 'TableLookup',
            },
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('feedbackid', models.AutoField(db_column='FeedbackID', primary_key=True, serialize=False)),
                ('rating', models.IntegerField(blank=True, db_column='Rating', null=True)),
                ('notes', models.CharField(blank=True, db_column='Notes', max_length=255, null=True)),
                ('bodid', models.ForeignKey(blank=True, db_column='BodID', null=True, on_delete=django.db.models.deletion.PROTECT, to='myapp.bod')),
            ],
            options={
                'db_table': 'Feedback',
            },
        ),
        migrations.AddField(
            model_name='bod',
            name='permissionid',
            field=models.ForeignKey(blank=True, db_column='PermissionID', null=True, on_delete=django.db.models.deletion.PROTECT, to='myapp.permissionlevel'),
        ),
        migrations.CreateModel(
            name='Log',
            fields=[
                ('logid', models.AutoField(db_column='LogID', primary_key=True, serialize=False)),
                ('logtime', models.DateTimeField(blank=True, db_column='LogTime', null=True)),
                ('successful', models.BooleanField(blank=True, db_column='Successful', null=True)),
                ('notes', models.CharField(blank=True, db_column='Notes', max_length=255, null=True)),
                ('bodid', models.ForeignKey(blank=True, db_column='BodID', null=True, on_delete=django.db.models.deletion.PROTECT, to='myapp.bod')),
                ('operationperformed', models.ForeignKey(blank=True, db_column='OperationPerformed', null=True, on_delete=django.db.models.deletion.PROTECT, to='myapp.operationlookup')),
                ('affectedtableid', models.ForeignKey(blank=True, db_column='AffectedTableID', null=True, on_delete=django.db.models.deletion.PROTECT, to='myapp.tablelookup')),
            ],
            options={
                'db_table': 'Log',
            },
        ),
        migrations.CreateModel(
            name='Trainingdataset',
            fields=[
                ('trainingdatasetid', models.AutoField(db_column='TrainingDatasetID', primary_key=True, serialize=False)),
                ('claimid', models.ForeignKey(blank=True, db_column='ClaimID', null=True, on_delete=django.db.models.deletion.PROTECT, to='myapp.claim')),
            ],
            options={
                'db_table': 'TrainingDataset',
            },
        ),
        migrations.CreateModel(
            name='Uploadedrecord',
            fields=[
                ('uploadedrecordid', models.AutoField(db_column='UploadedRecordID', primary_key=True, serialize=False)),
                ('predictedsettlement', models.FloatField(blank=True, db_column='PredictedSettlement', null=True)),
                ('bodid', models.ForeignKey(blank=True, db_column='BodID', null=True, on_delete=django.db.models.deletion.PROTECT, to='myapp.bod')),
                ('claimid', models.ForeignKey(blank=True, db_column='ClaimID', null=True, on_delete=django.db.models.deletion.PROTECT, to='myapp.claim')),
                ('feedbackid', models.ForeignKey(blank=True, db_column='FeedbackID', null=True, on_delete=django.db.models.deletion.PROTECT, to='myapp.feedback')),
                ('modelid', models.ForeignKey(blank=True, db_column='ModelID', null=True, on_delete=django.db.models.deletion.PROTECT, to='myapp.model')),
            ],
            options={
                'db_table': 'UploadedRecord',
            },
        ),
    ]
